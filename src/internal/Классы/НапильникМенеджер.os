#Использовать annotations
#Использовать asserts
#Использовать reflector

#Область ОписаниеПеременных

// Массив из ОпределениеЖелудя - Список определений желудей, являющихся напильниками.
Перем ОпределенияНапильников;

// Соответствие, в котором хранятся все определения желудей, являющихся напильниками.  
//  * Ключ - Строка - имя желудя.
//  * Значение - ОпределениеЖелудя - определение напильника.
Перем ОпределенияНапильниковПоИмени;

// Соответствие - Соответствие, в котором хранится список применяемых к конкретному
//                желудю напильников.  
//  * Ключ - Строка - имя желудя.
//  * Значение - ОпределениеЖелудя - определение напильника.
Перем КэшПрименяемыхНапильников;

// Массив из ОпределениеЖелудя - Список инициализируемых в данный момент напильников.
Перем ИнициализируемыеНапильники;

// Поделка - Управляющий ioc-контейнер.
Перем Поделка;

// ФабрикаЖелудей - Фабрика желудей для получения списка определений.
Перем ФабрикаЖелудей;

// Лог - Логгер НапильникМенеджера.
Перем Лог;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьОпределениеНапильника(ОпределениеНапильника, Системный = Ложь) Экспорт

	Порядок = ОпределениеНапильника.Порядок();

	МинимальныйПорядок = 0;
	Если Порядок < МинимальныйПорядок Тогда
		ВызватьИсключение "Неверное значение параметра ""Порядок"". Порядок не может быть меньше, чем " + МинимальныйПорядок;
	КонецЕсли;

	МаксимальныйПорядок = 999999;
	Если Порядок > МаксимальныйПорядок Тогда
		ВызватьИсключение "Неверное значение параметра ""Порядок"". Порядок не может быть больше, чем " + МаксимальныйПорядок;
	КонецЕсли;

	Если НЕ Системный Тогда
		Если Порядок = МинимальныйПорядок ИЛИ Порядок = МаксимальныйПорядок Тогда
			ВызватьИсключение "Неверное значение параметра ""Порядок"". Использовано зарезервированное значение " + Порядок;
		КонецЕсли;
	КонецЕсли;

	// Реинициализация сортированного списка напильников для возможности их использования в заготовках.
	ОпределенияНапильников = ФабрикаЖелудей.ПолучитьСписокОпределенийЖелудей("Напильник");
	КэшПрименяемыхНапильников.Очистить();
	ОпределенияНапильниковПоИмени.Вставить(ОпределениеНапильника.Имя(), ОпределениеНапильника);

КонецПроцедуры

Функция ОпределитьПрименяемыеНапильники(ОпределениеЖелудя) Экспорт

	ИмяЖелудя = ОпределениеЖелудя.Имя();

	ПрименяемыеНапильники = КэшПрименяемыхНапильников.Получить(ИмяЖелудя);
	Если ПрименяемыеНапильники <> Неопределено Тогда
		Возврат ПрименяемыеНапильники;
	КонецЕсли;

	Лог.Отладка("Кэш применяемых напильников для желудя %1 пуст. Выполняется расчет...", ИмяЖелудя);

	ПрименяемыеНапильники = Новый Массив;
	
	АннотацииЗавязи = ОпределениеЖелудя.Завязь().ДанныеМетода().Аннотации;
	АннотацияОсобоеОбращение = РаботаСАннотациями.НайтиАннотацию(АннотацииЗавязи, "ОсобоеОбращение");
	ОпределениеАннотацииОсобоеОбращение = Поделка.ПолучитьОпределениеАннотации("ОсобоеОбращение");
	Если АннотацияОсобоеОбращение <> Неопределено Тогда
		ОбъектАннотацииОсобоеОбращение = ОпределениеАннотацииОсобоеОбращение.СоздатьОбъектАннотации(АннотацияОсобоеОбращение);
	КонецЕсли;

	Для Каждого ОпределениеНапильника Из ОпределенияНапильников Цикл
		
		ИмяНапильника = ОпределениеНапильника.Имя();
		Лог.Отладка("Проверка применения напильника %1", ИмяНапильника);

		КорневаяАннотация = ОпределениеНапильника.КорневаяАннотация();

		НапильникМожетПрименяться = КорневаяАннотация.МожетПрименятьсяНа(ОпределениеЖелудя);		
		
		Лог.Отладка("Напильник %1 может применяться на желуде %2: %3",
			ИмяНапильника,
			ИмяЖелудя,
			НапильникМожетПрименяться
		);

		Если НапильникМожетПрименяться И ОбъектАннотацииОсобоеОбращение <> Неопределено Тогда
			НапильникМожетПрименяться = ОбъектАннотацииОсобоеОбращение.НапильникМожетПрименяться(ИмяНапильника);

			Лог.Отладка(
				"Желудь %1 требует особого обращения. Напильник %2 применяется: %3",
				ИмяЖелудя,
				ИмяНапильника,
				НапильникМожетПрименяться
			);
		КонецЕсли;

		Если НапильникМожетПрименяться Тогда
			ПрименяемыеНапильники.Добавить(ОпределениеНапильника);
		КонецЕсли;

	КонецЦикла;

	КэшПрименяемыхНапильников.Вставить(ИмяЖелудя, ПрименяемыеНапильники);

	Возврат ПрименяемыеНапильники;

КонецФункции

Функция ПолучитьОпределениеНапильника(ИмяНапильника) Экспорт
	Возврат ОпределенияНапильниковПоИмени.Получить(ИмяНапильника);
КонецФункции

Процедура ПроинициализироватьНапильники() Экспорт

	Для Каждого ОпределениеНапильника Из ОпределенияНапильников Цикл
		Поделка.НайтиЖелудь(ОпределениеНапильника.Имя());
	КонецЦикла;

КонецПроцедуры

Функция ПрименитьНапильники(Желудь, ОпределениеЖелудя) Экспорт
	
	Если ОпределениеЖелудя.Спецификация() = СостоянияПриложения.Инициализация() Тогда
		Возврат Желудь;
	КонецЕсли;
	
	ПрименяемыеНапильники = ОпределитьПрименяемыеНапильники(ОпределениеЖелудя);

	Для Каждого ОпределениеНапильника Из ПрименяемыеНапильники Цикл
		
		Если ОпределениеНапильника.Имя() = ОпределениеЖелудя.Имя() Тогда
			ТекстСообщения = СтрШаблон(
				"Напильник %1 не может быть применен сам к себе",
				ОпределениеНапильника.Имя()
			);
			Лог.Отладка(ТекстСообщения);

			Продолжить;
		КонецЕсли;

		Если ИнициализируемыеНапильники.Найти(ОпределениеНапильника.Имя()) <> Неопределено Тогда
			ТекстСообщения = СтрШаблон(
				"Напильник %1 не может быть применен к желудю %2, так как он уже инициализируется.",
				ОпределениеНапильника.Имя(),
				ОпределениеЖелудя.Имя()
			);
			Лог.Отладка(ТекстСообщения);

			Продолжить;
		КонецЕсли;
		
		Напильник = Поделка.НайтиЖелудь(ОпределениеНапильника.Имя());
		Желудь = Напильник.ОбработатьЖелудь(Желудь, ОпределениеЖелудя);
	
	КонецЦикла;
	
	Возврат Желудь;
	
КонецФункции

Процедура ДобавитьИнициализируемыйНапильник(ИмяНапильника) Экспорт
	Если ИнициализируемыеНапильники.Найти(ИмяНапильника) = Неопределено Тогда
		ИнициализируемыеНапильники.Добавить(ИмяНапильника);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьФабрикуЖелудей(пФабрикаЖелудей) Экспорт
	ФабрикаЖелудей = пФабрикаЖелудей;
КонецПроцедуры

Процедура УдалитьИнициализируемыйНапильник(ИмяНапильника) Экспорт
	ИндексНапильника = ИнициализируемыеНапильники.Найти(ИмяНапильника);
	Если ИндексНапильника <> Неопределено Тогда
		ИнициализируемыеНапильники.Удалить(ИндексНапильника);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

Процедура ПриСозданииОбъекта(пПоделка)

	Поделка = пПоделка;

	ИнициализируемыеНапильники = Новый Массив();
	
	ОпределенияНапильниковПоИмени = Новый Соответствие();
	ОпределенияНапильников = Новый Массив();
	КэшПрименяемыхНапильников = Новый Соответствие();

	Лог = Логирование.ПолучитьЛог("oscript.lib.autumn.core.НапильникМенеджер");

КонецПроцедуры

#КонецОбласти