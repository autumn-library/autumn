#Использовать asserts
#Использовать fluent
#Использовать reflector

Перем ОпределенияЖелудейПоИмени;
Перем ОпределенияЖелудейПоПрозвищу;
Перем ОпределенияНапильников;
Перем ИнициализируемыеНапильники;

Функция ПолучитьОпределенияЖелудей() Экспорт
	Возврат Новый ФиксированноеСоответствие(ОпределенияЖелудейПоИмени);
КонецФункции

Функция ПолучитьОпределениеЖелудя(Имя) Экспорт
	НайденноеОпределение = ОпределенияЖелудейПоИмени.Получить(Имя);
	Если НайденноеОпределение <> Неопределено Тогда
		Возврат НайденноеОпределение;
	КонецЕсли;

	НайденныеОпределения = ОпределенияЖелудейПоПрозвищу.Получить(Имя);
	Если НайденныеОпределения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НайденныеОпределения.Количество() = 1 Тогда
		Возврат НайденныеОпределения[0];
	КонецЕсли;

	НайденноеОпределение = НайтиОпределениеВерховного(НайденныеОпределения);
	
	Если НайденноеОпределение = Неопределено Тогда
		ВызватьИсключение "Найдено несколько желудей с именем/прозвищем """ + Имя + """";
	КонецЕсли;

	Возврат НайденноеОпределение;
КонецФункции

Функция НайтиОпределениеВерховного(Коллекция)
	Для Каждого Элемент из Коллекция Цикл
		Если Элемент.Верховный() = Истина Тогда
			Возврат Элемент; 
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьСписокОпределенийЖелудей(Имя) Экспорт

	Результат = Новый Массив;

	НайденноеОпределение = ОпределенияЖелудейПоИмени.Получить(Имя);
	Если НайденноеОпределение <> Неопределено Тогда
		Результат.Добавить(НайденноеОпределение);
		Возврат Новый ФиксированныйМассив(Результат);
	КонецЕсли;

	НайденныеОпределения = ОпределенияЖелудейПоПрозвищу.Получить(Имя);
	
	Если НайденныеОпределения <> Неопределено Тогда
		Для Каждого Определение Из НайденныеОпределения Цикл
			Результат.Добавить(Определение);
		КонецЦикла;
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

Процедура ПроинициализироватьНапильники(Поделка) Экспорт
	Для Каждого ОпределениеНапильника Из ОпределенияНапильников Цикл
		Поделка.НайтиЖелудь(ОпределениеНапильника.Имя);
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьЖелудь(ТипЖелудя, Имя) Экспорт

	ОпределениеЖелудя = ДобавитьЖителяЛеса(ТипЖелудя, Имя, "Желудь");

	Возврат ОпределениеЖелудя;

КонецФункции

Функция ДобавитьДуб(ТипДуба) Экспорт

	ОпределениеЖелудя = ДобавитьЖителяЛеса(ТипДуба, "", "Дуб");

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипДуба);

	МетодыЗавязи = РефлекторОбъекта.ПолучитьТаблицуМетодов("Завязь");

	Для Каждого МетодЗавязи Из МетодыЗавязи Цикл
		
		ТипЖелудяЗавязи = ПрочитатьТипЖелудя(МетодЗавязи);
		ИмяЖелудяЗавязи = ПрочитатьИмяЖелудя(МетодЗавязи, "Завязь", МетодЗавязи.Имя);
		ХарактерЖелудя = ПрочитатьХарактерЖелудя(МетодЗавязи);
		ПрилепляемыеЧастицы = ПрочитатьПрилепляемыеЧастицыВМетоде(МетодЗавязи);
		Завязь = СоздатьЗавязьЧерезМетодЗавязи(ТипДуба, МетодЗавязи);
		Прозвища = ПрочитатьПрозвища(МетодЗавязи, ИмяЖелудяЗавязи);
		Верховный = ПрочитатьПризнакВерховногоЖелудя(МетодЗавязи);
		ВремениИнициализации = Ложь;

		ОпределениеЗавязи = Новый ОпределениеЖелудя(
			ТипЖелудяЗавязи,
			ИмяЖелудяЗавязи,
			ХарактерЖелудя,
			ПрилепляемыеЧастицы,
			Завязь,
			Прозвища,
			Верховный,
			ВремениИнициализации
		);
		СохранитьОпределениеЖелудя(ОпределениеЗавязи);

	КонецЦикла;

	Возврат ОпределениеЖелудя;

КонецФункции

Функция ДобавитьРогатку(ТипРогатки) Экспорт
	ОпределениеРогатки = ДобавитьЖителяЛеса(ТипРогатки, "", "Рогатка");

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипРогатки);
	
	Ожидаем
		.Что(
			РефлекторОбъекта.ЕстьПроцедура("ПриЗапускеПриложения", 0),
			"Рогатка должна иметь процедуру ПриЗапускеПриложения()"
		)
		.ЭтоИстина();

	Возврат ОпределениеРогатки;
КонецФункции

Функция ДобавитьЗаготовку(ТипЗаготовки) Экспорт
	ОпределениеЗаготовки = ДобавитьЖителяЛеса(ТипЗаготовки, "", "Заготовка");

	Для Каждого ПриклепляемаяЧастица Из ОпределениеЗаготовки.ПрилепляемыеЧастицы() Цикл
		Ожидаем
			.Что(ПриклепляемаяЧастица.ТипЧастицы(), "К заготовке могут прилепляться только детальки.")
			.Равно(ТипыПрилепляемыхЧастиц.Деталька());
	КонецЦикла;

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипЗаготовки);
	
	Ожидаем
		.Что(
			РефлекторОбъекта.ЕстьПроцедура("ПриИнициализацииПоделки", 1),
			"Заготовка должна иметь процедуру ПриИнициализацииПоделки(Поделка)"
		)
		.ЭтоИстина();

	Возврат ОпределениеЗаготовки;
КонецФункции

Функция ДобавитьНапильник(ТипНапильника) Экспорт
	ОпределениеНапильника = ДобавитьЖителяЛеса(ТипНапильника, "", "Напильник");

	ДобавитьОпределениеНапильника(ОпределениеНапильника);

	Возврат ОпределениеНапильника;
КонецФункции

Функция ДобавитьСистемныйНапильник(ТипНапильника) Экспорт
	ОпределениеНапильника = ДобавитьЖителяЛеса(ТипНапильника, "", "Напильник");

	ДобавитьОпределениеНапильника(ОпределениеНапильника, Истина);

	Возврат ОпределениеНапильника;
КонецФункции

Функция НайтиЖелудь(Поделка, ИмяЖелудя, ПрилепляемыеЧастицы) Экспорт

	ОпределениеЖелудя = Поделка.ПолучитьОпределениеЖелудя(ИмяЖелудя);

	Если ОпределениеЖелудя = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить определение Желудя по имени Желудя %1", ИмяЖелудя);
	КонецЕсли;

	СписокНапильников = ИнициализируемыеНапильники.Получить(Поделка);
	Если СписокНапильников = Неопределено Тогда
		СписокНапильников = Новый Массив;
		ИнициализируемыеНапильники.Вставить(Поделка, СписокНапильников);
	КонецЕсли;
	ЭтоНапильник = ОпределенияНапильников.Найти(ОпределениеЖелудя.Имя(), "Имя") <> Неопределено;

	Если ЭтоНапильник Тогда
		Если СписокНапильников.Найти(ОпределениеЖелудя.Имя()) = Неопределено Тогда
			СписокНапильников.Добавить(ОпределениеЖелудя.Имя());
		КонецЕсли;
	КонецЕсли;

	ПереданныеПрилепляемыеЧастицы = ПрилепляемыеЧастицы;
	Если ПереданныеПрилепляемыеЧастицы = Неопределено Тогда
		ПереданныеПрилепляемыеЧастицы = Новый Массив;
	КонецЕсли;

	Если ПереданныеПрилепляемыеЧастицы.Количество() = ОпределениеЖелудя.ПрилепляемыеЧастицы().Количество() Тогда
		ПередаваемыеПрилепляемыеЧастицы = ПереданныеПрилепляемыеЧастицы;
	Иначе
		
		КоличествоБлестяшек = ПосчитатьКоличествоБлестяшек(ОпределениеЖелудя.ПрилепляемыеЧастицы());

		Если КоличествоБлестяшек <> ПереданныеПрилепляемыеЧастицы.Количество() Тогда
			ВызватьИсключение "При поиске желудя " + ИмяЖелудя + " количество переданных произвольных параметров отличается от количества параметров не-желудей/не-деталек.";
		КонецЕсли;

		СчетчикИспользованияБлестяшек = 0;
		ПередаваемыеПрилепляемыеЧастицы = Новый Массив;
		Для Каждого ДанныеОПрилепляемойЧастице Из ОпределениеЖелудя.ПрилепляемыеЧастицы() Цикл
			
			Если ДанныеОПрилепляемойЧастице.ТипЧастицы() = ТипыПрилепляемыхЧастиц.Блестяшка() Тогда
				ПрилепляемаяЧастица = ПереданныеПрилепляемыеЧастицы[СчетчикИспользованияБлестяшек];
				СчетчикИспользованияБлестяшек = СчетчикИспользованияБлестяшек + 1;
			Иначе
				ПрилепляемаяЧастица = ПрилеплениеЧастиц.НайтиПрилепляемуюЧастицу(Поделка, ДанныеОПрилепляемойЧастице);
			КонецЕсли;

			ПередаваемыеПрилепляемыеЧастицы.Добавить(ПрилепляемаяЧастица);
		КонецЦикла;
	КонецЕсли;

	Завязь = ОпределениеЖелудя.Завязь();
	
	Действие = Завязь.Действие();
	Если Завязь.ЭтоКонструктор() Тогда
		Желудь = Действие.Выполнить(ОпределениеЖелудя.ТипЖелудя(), ПередаваемыеПрилепляемыеЧастицы);
	Иначе
		Желудь = Действие.Выполнить(Поделка, Завязь.Родитель(), Завязь.ИмяМетода(), ПередаваемыеПрилепляемыеЧастицы);
	КонецЕсли;

	Если ЭтоНапильник Тогда
		ИндексНапильника = СписокНапильников.Найти(ОпределениеЖелудя.Имя());
		СписокНапильников.Удалить(ИндексНапильника);
	Иначе
		Если НЕ ОпределениеЖелудя.ВремениИнициализации() Тогда
			Для Каждого ОпределениеНапильника Из ОпределенияНапильников Цикл
				
				Если ОпределениеНапильника.Имя = ОпределениеЖелудя.Имя() Тогда
					Продолжить;
				КонецЕсли;
				Если СписокНапильников.Найти(ОпределениеНапильника.Имя) <> Неопределено Тогда
					// TODO: Сообщение о пропуске запуска напильника на желуде из-за циклической зависимости
					Продолжить;
				КонецЕсли;
				
				Напильник = Поделка.НайтиЖелудь(ОпределениеНапильника.Имя);
				Желудь = Напильник.ОбработатьЖелудь(Желудь, ОпределениеЖелудя);
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Желудь;
	
КонецФункции

Функция ПосчитатьКоличествоБлестяшек(ПрилепляемыеЧастицы)
	Количество = 0;
	Для Каждого Элемент из ПрилепляемыеЧастицы Цикл
		Если Элемент.ТипЧастицы() = ТипыПрилепляемыхЧастиц.Блестяшка() Тогда
			Количество = Количество + 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Количество;
КонецФункции

Функция ДобавитьЖителяЛеса(ТипЖителяТеля, ИмяЖителяЛеса, АннотацияНадКонструктором)

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипЖителяТеля);

	Методы = РефлекторОбъекта.ПолучитьТаблицуМетодов(АннотацияНадКонструктором, Ложь);
	Ожидаем.Что(
		Методы.Количество(), 
		"Класс должен иметь ровно один метод с аннотацией &" + АннотацияНадКонструктором
	).Равно(1);

	Конструктор = Методы[0];

	ОпределениеЖелудя = СоздатьОпределениеЖелудя(ТипЖителяТеля, Конструктор, АннотацияНадКонструктором, ИмяЖителяЛеса);
	СохранитьОпределениеЖелудя(ОпределениеЖелудя);

	Возврат ОпределениеЖелудя;

КонецФункции

Функция СоздатьОпределениеЖелудя(ТипЖелудя, Конструктор, АннотацияНадКонструктором, Знач ИмяЖелудя = "")
	
	Если Не ЗначениеЗаполнено(ИмяЖелудя) Тогда
		ИмяЖелудя = ПрочитатьИмяЖелудя(Конструктор, АннотацияНадКонструктором, Строка(ТипЖелудя));
	КонецЕсли;

	ПрилепляемыеЧастицы = ПрочитатьПрилепляемыеЧастицыВМетоде(Конструктор);
	Характер = ПрочитатьХарактерЖелудя(Конструктор);
	Завязь = СоздатьЗавязьЧерезКонструкторОбъекта(ТипЖелудя, Конструктор);
	Прозвища = ПрочитатьПрозвища(Конструктор, ИмяЖелудя);
	Верховный = ПрочитатьПризнакВерховногоЖелудя(Конструктор);
	ВремениИнициализации = АннотацияНадКонструктором = "Заготовка";

	ОпределениеЖелудя = Новый ОпределениеЖелудя(
		ТипЖелудя,
		ИмяЖелудя,
		Характер,
		ПрилепляемыеЧастицы,
		Завязь,
		Прозвища,
		Верховный,
		ВремениИнициализации
	);

	Возврат ОпределениеЖелудя;

КонецФункции

Функция СоздатьЗавязьЧерезКонструкторОбъекта(ТипЖелудя, Конструктор)
	
	Действие = Новый Действие(ФабричныеМетоды, "КонструкторОбъекта");
	Завязь = Новый Завязь(Строка(ТипЖелудя), Конструктор.Имя, Конструктор, Действие, Истина);

	Возврат Завязь;

КонецФункции

Функция СоздатьЗавязьЧерезМетодЗавязи(ТипДуба, МетодЗавязи)

	Действие = Новый Действие(ФабричныеМетоды, "МетодЗавязи");
	Завязь = Новый Завязь(Строка(ТипДуба), МетодЗавязи.Имя, МетодЗавязи, Действие, Ложь);

	Возврат Завязь;

КонецФункции

Функция ПрочитатьИмяЖелудя(Метод, АннотацияНадМетодом, ЗначениеПоУмолчанию)

	Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Метод, АннотацияНадМетодом);
	ИмяЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, , ЗначениеПоУмолчанию);

	Возврат ИмяЖелудя;

КонецФункции

Функция ПрочитатьТипЖелудя(Метод)

	Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Метод, "Завязь");
	ТипЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		Аннотация,
		"Тип"
	);

	Если ТипЖелудя = Неопределено Тогда
		ТипЖелудя = Метод.Имя;
	КонецЕсли;

	Попытка
		РеальныйТип = Тип(ТипЖелудя);
	Исключение
		ВызватьИсключение "Тип желудя в Завязи " + Метод.Имя + " не известен. Укажите тип желудя в аннотации или переименуйте метод завязи.";
	КонецПопытки;

	Возврат РеальныйТип;
КонецФункции

Функция ПрочитатьПрилепляемыеЧастицыВМетоде(Метод)

	ПрилепляемыеЧастицы = Новый Массив;
	Для Каждого ПараметрМетода Из Метод.Параметры Цикл

		ПрилепляемаяЧастица = ПрилеплениеЧастиц.ДанныеОПрилепляемойЧастице(ПараметрМетода);
		ПрилепляемыеЧастицы.Добавить(ПрилепляемаяЧастица);

	КонецЦикла;

	Возврат ПрилепляемыеЧастицы;

КонецФункции

Функция ПрочитатьХарактерЖелудя(Метод)
	ЗначениеПоУмолчанию = ХарактерыЖелудей.Одиночка();

	Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Метод, "Характер");
	Если Аннотация = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ХарактерЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		Аннотация,
		,
		ЗначениеПоУмолчанию
	);

	Если НЕ ХарактерыЖелудей.ЭтоХарактерЖелудя(ХарактерЖелудя) Тогда
		ВызватьИсключение "Неизвестный характер желудя " + ХарактерЖелудя;
	КонецЕсли;

	Возврат ХарактерЖелудя;
КонецФункции

Функция ПрочитатьПрозвища(Метод, ЗначениеПоУмолчанию)
	
	Результат = Новый Массив;

	Аннотации = РаботаСАннотациями.ПолучитьАннотации(Метод, "Прозвище");
	Если Аннотации.Количество() = 0 Тогда
		Результат.Добавить(ЗначениеПоУмолчанию);
		Возврат Результат;
	КонецЕсли;

	Для Каждого Аннотация Из Аннотации Цикл
		Прозвище = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация);

		Результат.Добавить(Прозвище);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПрочитатьПризнакВерховногоЖелудя(Метод)
	Возврат РаботаСАннотациями.ПолучитьАннотацию(Метод, "Верховный") <> Неопределено;
КонецФункции

Процедура ДобавитьОпределениеНапильника(ОпределениеНапильника, Системный = Ложь)

	Аннотация = РаботаСАннотациями.ПолучитьАннотацию(ОпределениеНапильника.Завязь().ДанныеМетода(), "Напильник");
	Порядок = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Порядок", 1);

	МинимальныйПорядок = 0;
	Если Порядок < МинимальныйПорядок Тогда
		ВызватьИсключение "Неверное значение параметра ""Порядок"". Порядок не может быть меньше, чем " + МинимальныйПорядок;
	КонецЕсли;

	МаксимальныйПорядок = 999999;
	Если Порядок > МаксимальныйПорядок Тогда
		ВызватьИсключение "Неверное значение параметра ""Порядок"". Порядок не может быть больше, чем " + МаксимальныйПорядок;
	КонецЕсли;

	Если НЕ Системный Тогда
		Если Порядок = МинимальныйПорядок ИЛИ Порядок = МаксимальныйПорядок Тогда
			ВызватьИсключение "Неверное значение параметра ""Порядок"". Использовано зарезервированное значение " + Порядок;
		КонецЕсли;
	КонецЕсли;

	СтрокаОпределений = ОпределенияНапильников.Добавить();
	СтрокаОпределений.Порядок = Порядок;
	СтрокаОпределений.Имя = ОпределениеНапильника.Имя();
	СтрокаОпределений.ОпределениеНапильника = ОпределениеНапильника;

	ОпределенияНапильников.Сортировать("Порядок Возр");

КонецПроцедуры

Процедура СохранитьОпределениеЖелудя(ОпределениеЖелудя)

	СохраненноеОпределениеЖелудя = ОпределенияЖелудейПоИмени.Получить(ОпределениеЖелудя.Имя());
	Если СохраненноеОпределениеЖелудя <> Неопределено Тогда
		Если ОпределениеЖелудя.Верховный() И СохраненноеОпределениеЖелудя.Верховный() Тогда
			ВызватьИсключение "Определение верховного желудя с именем """ + ОпределениеЖелудя.Имя() + """ уже существует";
		ИначеЕсли ОпределениеЖелудя.Верховный() И НЕ СохраненноеОпределениеЖелудя.Верховный() Тогда
			// no-op: Допустимая ситуация переопределения.
			// todo: Логирование
		ИначеЕсли НЕ ОпределениеЖелудя.Верховный() И СохраненноеОпределениеЖелудя.Верховный() Тогда
			// no-op: Допустимая ситуация непереопределения.
			// todo: Логирование
		Иначе
			ВызватьИсключение "Определение желудя с именем """ + ОпределениеЖелудя.Имя() + """ уже существует";
		КонецЕсли;
	КонецЕсли;

	ОпределенияЖелудейПоИмени.Вставить(ОпределениеЖелудя.Имя(), ОпределениеЖелудя);

	Прозвища = ОпределениеЖелудя.Прозвища();
	Для Каждого Прозвище Из Прозвища Цикл

		СуществующиеИмена = ОпределенияЖелудейПоПрозвищу.Получить(Прозвище);
		Если СуществующиеИмена = Неопределено Тогда
			СуществующиеИмена = Новый Массив;
		КонецЕсли;
		СуществующиеИмена.Добавить(ОпределениеЖелудя);
		ОпределенияЖелудейПоПрозвищу.Вставить(Прозвище, СуществующиеИмена);	

	КонецЦикла;

КонецПроцедуры

Процедура ПриСозданииОбъекта()
	ОпределенияЖелудейПоИмени = Новый Соответствие();
	ОпределенияЖелудейПоПрозвищу = Новый Соответствие();
	
	ОпределенияНапильников = Новый ТаблицаЗначений();
	ОпределенияНапильников.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ОпределенияНапильников.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ОпределенияНапильников.Колонки.Добавить("ОпределениеНапильника", Новый ОписаниеТипов("ОпределениеЖелудя"));

	ОпределенияНапильников.Индексы.Добавить("Имя");
	ОпределенияНапильников.Индексы.Добавить("Порядок");

	ИнициализируемыеНапильники = Новый Соответствие();
КонецПроцедуры