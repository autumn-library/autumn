#Использовать annotations
#Использовать asserts
#Использовать fluent
#Использовать reflector

#Область ОписаниеПеременных

// Поделка - Управляющий ioc-контейнер.
Перем Поделка;
// РазворачивательАннотаций - разворачиватель аннотаций свойств и методов желудей.
Перем РазворачивательАннотаций;
// ПрилепляторЧастиц - объект, который умеет прилеплять частицы к желудям.
Перем ПрилепляторЧастиц;

// НапильникМенеджер - менеджер для работы с напильниками.
Перем НапильникМенеджер;

// ПриемкаЗависимостей - обработчик для внедрения зависимостей.
Перем ПриемкаЗависимостей;

// Соответствие, в котором хранятся все определения желудей:
//  * Ключ - Строка - имя желудя.
//  * Значение - ОпределениеЖелудя - определение желудя.
Перем ОпределенияЖелудейПоИмени;

// Соответствие, в котором хранятся все определения желудей.
//  * Ключ - Строка - прозвище желудя
//  * Значение - Массив из ОпределениеЖелудя - определения желудей с таким прозвищем.
Перем ОпределенияЖелудейПоПрозвищу;

// Лог - Логгер ФабрикиЖелудей.
Перем Лог;

// Рефлектор - кеш инстанса рефлектора
Перем Рефлектор;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОпределенияЖелудей() Экспорт
	Возврат Новый ФиксированноеСоответствие(ОпределенияЖелудейПоИмени);
КонецФункции

Функция ПолучитьОпределениеЖелудя(Имя) Экспорт
	НайденноеОпределение = ОпределенияЖелудейПоИмени.Получить(Имя);
	Если НайденноеОпределение <> Неопределено Тогда
		Возврат НайденноеОпределение;
	КонецЕсли;

	НайденныеОпределения = ОпределенияЖелудейПоПрозвищу.Получить(Имя);
	Если НайденныеОпределения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НайденныеОпределения.Количество() = 1 Тогда
		Возврат НайденныеОпределения[0];
	КонецЕсли;

	НайденноеОпределение = НайтиОпределениеВерховного(НайденныеОпределения);
	
	Если НайденноеОпределение = Неопределено Тогда
		ВызватьИсключение "Найдено несколько желудей с именем/прозвищем """ + Имя + """";
	КонецЕсли;

	Возврат НайденноеОпределение;
КонецФункции

Функция ПолучитьСписокОпределенийЖелудей(Имя) Экспорт

	Результат = Новый Массив;

	НайденноеОпределение = ОпределенияЖелудейПоИмени.Получить(Имя);
	Если НайденноеОпределение <> Неопределено Тогда
		Результат.Добавить(НайденноеОпределение);
		Возврат Новый ФиксированныйМассив(Результат);
	КонецЕсли;

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Порядок");
	Результат.Колонки.Добавить("ОпределениеЖелудя");

	НайденныеОпределения = ОпределенияЖелудейПоПрозвищу.Получить(Имя);
	
	Если НайденныеОпределения <> Неопределено Тогда
		Для Каждого Определение Из НайденныеОпределения Цикл
			Строка = Результат.Добавить();
			Строка.ОпределениеЖелудя = Определение;
			Строка.Порядок = Определение.Порядок();
		КонецЦикла;
	КонецЕсли;

	Результат.Сортировать("Порядок Возр");
	КопияРезультат = Результат.ВыгрузитьКолонку("ОпределениеЖелудя");

	Возврат Новый ФиксированныйМассив(КопияРезультат);

КонецФункции

Процедура ПроинициализироватьНапильники() Экспорт

	НапильникМенеджер.ПроинициализироватьНапильники();

КонецПроцедуры

Функция ДобавитьДуб(ТипДуба) Экспорт

	ИмяКорневойАннотации = "Завязь";
	ОпределениеЖелудя = ДобавитьЖителяЛеса(ТипДуба, "", "Дуб");
	МетодыЗавязи = ОпределениеЖелудя.НайтиМетодыСАннотациями(ИмяКорневойАннотации);

	Для Каждого МетодЗавязи Из МетодыЗавязи Цикл
		
		ИмяЖелудя = ПрочитатьИмяЖелудя(МетодЗавязи.Аннотации, ИмяКорневойАннотации, МетодЗавязи.Имя);
		ТипЖелудя = ПрочитатьТипЖелудя(МетодЗавязи, МетодЗавязи.Аннотации);

		ОпределениеЗавязи = СоздатьОпределениеЖелудя(
			ИмяЖелудя,
			ТипЖелудя,
			ТипДуба, 
			МетодЗавязи,
			МетодЗавязи.Аннотации,
			ИмяКорневойАннотации
		);
		СохранитьОпределениеЖелудя(ОпределениеЗавязи);

	КонецЦикла;

	Возврат ОпределениеЖелудя;

КонецФункции

Функция ДобавитьЗавязьИзЛямбды(ЛямбдаЗавязи, Контекст = Неопределено) Экспорт
	
	ИмяКорневойАннотации = "Завязь";

	Выражение = Лямбда.Выражение(ЛямбдаЗавязи);

	Если ТипЗнч(Контекст) = Тип("Структура") Тогда
		Выражение.Контекст(Контекст);
	Иначе
		Выражение.ЗахватитьОбъект(Контекст);
	КонецЕсли;

	Объект = Выражение.ВОбъект();

	Методы = Рефлектор.ПолучитьТаблицуМетодов(Объект);

	РазворачивательАннотаций.РазвернутьАннотацииСвойств(Методы, Объект);

	Завязи = РаботаСАннотациями.НайтиМетодыСАннотацией(Методы, ИмяКорневойАннотации);

	Если Завязи.Количество() <> 1 Тогда
		
		ВызватьИсключение СтрШаблон(
			"Лямбда выражения не содержит завязи:
            | %1",
			ЛямбдаЗавязи
		);

	КонецЕсли;

	Завязь = Завязи[0];

	ИмяЖелудя = ПрочитатьИмяЖелудя(Завязь.Аннотации, ИмяКорневойАннотации, "");
	ТипЖелудя = ПрочитатьТипЖелудя(Завязь, Завязь.Аннотации);

	ОпределениеЗавязи = СоздатьОпределениеЖелудя(
		ИмяЖелудя,
		ТипЖелудя,
		Объект,
		Завязь,
		Завязь.Аннотации,
		ИмяКорневойАннотации
	);

	СохранитьОпределениеЖелудя(ОпределениеЗавязи);

	Возврат ОпределениеЗавязи;

КонецФункции

Функция ДобавитьНапильник(ТипНапильника) Экспорт
	ОпределениеНапильника = ДобавитьЖителяЛеса(ТипНапильника, "", "Напильник");

	НапильникМенеджер.ДобавитьОпределениеНапильника(ОпределениеНапильника);

	Возврат ОпределениеНапильника;
КонецФункции

Функция ДобавитьСистемныйНапильник(ТипНапильника) Экспорт
	ОпределениеНапильника = ДобавитьЖителяЛеса(ТипНапильника, "", "Напильник");

	НапильникМенеджер.ДобавитьОпределениеНапильника(ОпределениеНапильника, Истина);

	Возврат ОпределениеНапильника;
КонецФункции

Функция НайтиЖелудь(ИмяЖелудя, ПрилепляемыеЧастицы) Экспорт

	ОпределениеЖелудя = Поделка.ПолучитьОпределениеЖелудя(ИмяЖелудя);

	Если ОпределениеЖелудя = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить определение Желудя по имени Желудя %1", ИмяЖелудя);
	КонецЕсли;

	ЭтоНапильник = НапильникМенеджер.ПолучитьОпределениеНапильника(ОпределениеЖелудя.Имя()) <> Неопределено;

	Если ЭтоНапильник Тогда
		НапильникМенеджер.ДобавитьИнициализируемыйНапильник(ОпределениеЖелудя.Имя());
	КонецЕсли;

	ПередаваемыеПрилепляемыеЧастицы = ПриемкаЗависимостей.ПодготовитьПрилепляемыеЧастицы(ОпределениеЖелудя, ПрилепляемыеЧастицы);

	Завязь = ОпределениеЖелудя.Завязь();
	
	Действие = Завязь.Действие();
	Если Завязь.ЭтоКонструктор() Тогда
		Желудь = Действие.Выполнить(ОпределениеЖелудя.ТипЖелудя(), ПередаваемыеПрилепляемыеЧастицы);
	ИначеЕсли Не ЗначениеЗаполнено(Завязь.Родитель()) Тогда
		Желудь = Рефлектор.ВызватьМетод(Действие, "Выполнить", ПередаваемыеПрилепляемыеЧастицы);		
	Иначе
		Желудь = Действие.Выполнить(Поделка, Завязь.Родитель(), Завязь.ИмяМетода(), ПередаваемыеПрилепляемыеЧастицы);
	КонецЕсли;

	Если ЭтоНапильник Тогда
		НапильникМенеджер.УдалитьИнициализируемыйНапильник(ОпределениеЖелудя.Имя());
	Иначе
		Желудь = НапильникМенеджер.ПрименитьНапильники(Желудь, ОпределениеЖелудя);
	КонецЕсли;

	Возврат Желудь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиОпределениеВерховного(Коллекция)
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.Верховный() = Истина Тогда
			Возврат Элемент; 
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура СохранитьОпределениеЖелудя(ОпределениеЖелудя)

	СохраненноеОпределениеЖелудя = ОпределенияЖелудейПоИмени.Получить(ОпределениеЖелудя.Имя());
	Если СохраненноеОпределениеЖелудя <> Неопределено Тогда
		Если ОпределениеЖелудя.Верховный() И СохраненноеОпределениеЖелудя.Верховный() Тогда
			ВызватьИсключение "Определение верховного желудя с именем """ + ОпределениеЖелудя.Имя() + """ уже существует";
		ИначеЕсли ОпределениеЖелудя.Верховный() И НЕ СохраненноеОпределениеЖелудя.Верховный() Тогда
			// no-op: Допустимая ситуация переопределения.
			// todo: Логирование
		ИначеЕсли НЕ ОпределениеЖелудя.Верховный() И СохраненноеОпределениеЖелудя.Верховный() Тогда
			// no-op: Допустимая ситуация непереопределения.
			// todo: Логирование
			Возврат;
		Иначе
			ВызватьИсключение "Определение желудя с именем """ + ОпределениеЖелудя.Имя() + """ уже существует";
		КонецЕсли;
	КонецЕсли;

	ОпределенияЖелудейПоИмени.Вставить(ОпределениеЖелудя.Имя(), ОпределениеЖелудя);

	Прозвища = ОпределениеЖелудя.Прозвища();
	Для Каждого Прозвище Из Прозвища Цикл

		СуществующиеИмена = ОпределенияЖелудейПоПрозвищу.Получить(Прозвище);
		Если СуществующиеИмена = Неопределено Тогда
			СуществующиеИмена = Новый Массив;
		КонецЕсли;
		СуществующиеИмена.Добавить(ОпределениеЖелудя);
		ОпределенияЖелудейПоПрозвищу.Вставить(Прозвище, СуществующиеИмена);	

	КонецЦикла;

КонецПроцедуры

Функция ДобавитьЖителяЛеса(ТипЖителяЛеса, ИмяЖителяЛеса, АннотацияНадКонструктором) Экспорт

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипЖителяЛеса);
	АннотацияНадКонструкторомКаноническая = НРег(АннотацияНадКонструктором);
	УсловияПоиска = Новый Структура("Имя", АннотацияНадКонструкторомКаноническая);

	Методы = РефлекторОбъекта.ПолучитьТаблицуМетодов(Неопределено, Ложь);
	Конструктор = Неопределено;
	Аннотации = Неопределено;
	
	Для Каждого Метод Из Методы Цикл
		РазворачивательАннотаций.РазвернутьАннотацииСвойства(Метод, ТипЖителяЛеса);
		Аннотации = Метод.Аннотации;

		НайденныеСтроки = Аннотации.НайтиСтроки(УсловияПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НайденныеСтроки.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон(
				"Над методом ""%1"" жителя леса с типом ""%2"" найдено более одной аннотации ""%3"".",
				Метод.Имя,
				ТипЖителяЛеса,
				АннотацияНадКонструктором
			);
		КонецЕсли;
		
		Конструктор = Метод;
		Прервать;
	КонецЦикла;

	Если Конструктор = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Не найден метод жителя леса типа ""%1"" с аннотацией ""%2"".",
			ТипЖителяЛеса,
			АннотацияНадКонструктором
		);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяЖителяЛеса) Тогда
		ИмяЖителяЛеса = ПрочитатьИмяЖелудя(Аннотации, АннотацияНадКонструктором, Строка(ТипЖителяЛеса));
	КонецЕсли;

	ОпределениеЖелудя = СоздатьОпределениеЖелудя(
		ИмяЖителяЛеса,
		ТипЖителяЛеса,
		ТипЖителяЛеса,
		Конструктор,
		Аннотации,
		АннотацияНадКонструктором
	);
	СохранитьОпределениеЖелудя(ОпределениеЖелудя);

	ПараметрыСобытия = Новый Массив;
	ПараметрыСобытия.Добавить(ОпределениеЖелудя);
	ВызватьСобытие("ПриДобавленииОпределенияЖелудя", ПараметрыСобытия);

	Возврат ОпределениеЖелудя;

КонецФункции

Функция СоздатьОпределениеЖелудя(
	ИмяЖелудя,
	ТипЖелудя,
	ВладелецСвойств,
	Конструктор,
	Аннотации,
	ИмяКорневойАннотации
)

	Завязь = СоздатьЗавязь(ВладелецСвойств, Конструктор);
	
	ПрилепляемыеЧастицы = ПриемкаЗависимостей.ПрочитатьПрилепляемыеЧастицыВМетоде(Конструктор, ВладелецСвойств);
	Характер = ПрочитатьХарактерЖелудя(Аннотации);
	Прозвища = ПрочитатьПрозвища(Аннотации, ИмяЖелудя);
	Порядок = ПрочитатьПорядок(Аннотации);
	Верховный = ПрочитатьПризнакВерховногоЖелудя(Аннотации);
	Спецификация = ПрочитатьСпецификацию(Аннотации);
	КорневаяАннотация = ПрочитатьКорневуюАннотацию(Аннотации, ИмяКорневойАннотации);

	// TODO: Унести в Приемку &Дуб
	// Если Спецификация = СостоянияПриложения.Инициализация() 
	// 	И НЕ ОпределениеЖелудя.Спецификация() = СостоянияПриложения.Инициализация() Тогда
	// 	ТекстСообщения = СтрШаблон(
	// 		"Дуб %1 имеет завязь %2, которая имеет &Спецификацию ""Инициализация"", но сам дуб не имеет этой спецификации.",
	// 		ОпределениеЖелудя.Имя(),
	// 		Конструктор.Имя
	// 	);
	// 	ВызватьИсключение ТекстСообщения;
	// КонецЕсли;

	ОпределениеЖелудя = Новый ОпределениеЖелудя(
		РазворачивательАннотаций,
		ТипЖелудя,
		ИмяЖелудя,
		Характер,
		ПрилепляемыеЧастицы,
		Завязь,
		Прозвища,
		Порядок,
		Верховный,
		Спецификация,
		КорневаяАннотация
	);

	Возврат ОпределениеЖелудя;

КонецФункции

#Область СозданиеЗавязи

Функция СоздатьЗавязь(ВладелецСвойств, Конструктор)

	Если НРег(Конструктор.Имя) = НРег("ПриСозданииОбъекта")
		ИЛИ НРег(Конструктор.Имя) = НРег("OnObjectCreation") Тогда

		Возврат СоздатьЗавязьЧерезКонструкторОбъекта(ВладелецСвойств, Конструктор);
	
	ИначеЕсли ТипЗнч(ВладелецСвойств) = Тип("Сценарий") Тогда

		Возврат СоздатьЗавязьЧерезМетодЛямбды(ВладелецСвойств, Конструктор);

	Иначе

		Возврат СоздатьЗавязьЧерезМетодЗавязи(ВладелецСвойств, Конструктор);

	КонецЕсли;

КонецФункции

Функция СоздатьЗавязьЧерезКонструкторОбъекта(ТипЖелудя, Конструктор)
	
	Действие = Новый Действие(ФабричныеМетоды, "КонструкторОбъекта");
	Завязь = Новый Завязь(Строка(ТипЖелудя), Конструктор.Имя, Конструктор, Действие, Истина);

	Возврат Завязь;

КонецФункции

Функция СоздатьЗавязьЧерезМетодЗавязи(ТипДуба, МетодЗавязи)

	Действие = Новый Действие(ФабричныеМетоды, "МетодЗавязи");
	Завязь = Новый Завязь(Строка(ТипДуба), МетодЗавязи.Имя, МетодЗавязи, Действие, Ложь);

	Возврат Завязь;

КонецФункции

Функция СоздатьЗавязьЧерезМетодЛямбды(Сценарий, МетодЗавязи)

	Действие = Новый Действие(Сценарий, МетодЗавязи.Имя);
	Завязь = Новый Завязь("", МетодЗавязи.Имя, МетодЗавязи, Действие, Ложь);

	Возврат Завязь;

КонецФункции

#КонецОбласти

#Область ЧтениеПараметровЖелудя

Функция ПрочитатьИмяЖелудя(Аннотации, АннотацияНадМетодом, ЗначениеПоУмолчанию)

	Аннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, АннотацияНадМетодом);
	ИмяЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, , ЗначениеПоУмолчанию);

	Возврат ИмяЖелудя;

КонецФункции

Функция ПрочитатьТипЖелудя(Метод, Аннотации)

	Аннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, "Завязь");
	ТипЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		Аннотация,
		"Тип"
	);

	Если ТипЖелудя = Неопределено Тогда
		ТипЖелудя = Метод.Имя;
	КонецЕсли;

	Попытка
		РеальныйТип = Тип(ТипЖелудя);
	Исключение
		ВызватьИсключение СтрШаблон(
			"Тип желудя в Завязи %1 не известен. Укажите тип желудя в аннотации или переименуйте метод завязи.",
			Метод.Имя
		);
	КонецПопытки;

	Возврат РеальныйТип;
КонецФункции

Функция ПрочитатьХарактерЖелудя(Аннотации)
	ЗначениеПоУмолчанию = ХарактерыЖелудей.Одиночка();

	Аннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, "Характер");
	Если Аннотация = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ХарактерЖелудя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		Аннотация,
		,
		ЗначениеПоУмолчанию
	);

	Если НЕ ХарактерыЖелудей.ЭтоХарактерЖелудя(ХарактерЖелудя) Тогда
		ВызватьИсключение "Неизвестный характер желудя " + ХарактерЖелудя;
	КонецЕсли;

	Возврат ХарактерЖелудя;
КонецФункции

Функция ПрочитатьПрозвища(Аннотации, ЗначениеПоУмолчанию)
	
	Результат = Новый Массив;
	Результат.Добавить(ЗначениеПоУмолчанию);
		
	Прозвища = РаботаСАннотациями.НайтиАннотации(Аннотации, "Прозвище");
	Для Каждого Аннотация Из Прозвища Цикл
		Прозвище = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация);
		
		Результат.Добавить(Прозвище);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПрочитатьПорядок(Аннотации)
	
	Аннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, "Порядок");

	ОпределениеАннотации = Поделка.ПолучитьОпределениеАннотации("Порядок");
	ОбъектАннотации = ОпределениеАннотации.СоздатьОбъектАннотации(Аннотация);

	Возврат ОбъектАннотации.Значение();

КонецФункции

Функция ПрочитатьПризнакВерховногоЖелудя(Аннотации)

	Возврат РаботаСАннотациями.НайтиАннотацию(Аннотации, "Верховный") <> Неопределено;

КонецФункции

Функция ПрочитатьСпецификацию(Аннотации)

	Аннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, "Спецификация");

	ОпределениеАннотации = Поделка.ПолучитьОпределениеАннотации("Спецификация");
	ОбъектАннотации = ОпределениеАннотации.СоздатьОбъектАннотации(Аннотация);

	Возврат ОбъектАннотации.Значение();

КонецФункции

Функция ПрочитатьКорневуюАннотацию(Аннотации, ИмяКорневойАннотации)

	КорневаяАннотация = РаботаСАннотациями.НайтиАннотацию(Аннотации, ИмяКорневойАннотации);
	ОпределениеАннотации = Поделка.ПолучитьОпределениеАннотации(КорневаяАннотация.Имя);

	ОбъектАннотации = ОпределениеАннотации.СоздатьОбъектАннотации(КорневаяАннотация);

	Возврат ОбъектАннотации;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

Процедура ПриСозданииОбъекта(пПоделка, пРазворачивательАннотаций, пПрилепляторЧастиц)

	Рефлектор = Новый Рефлектор();

	Поделка = пПоделка;
	РазворачивательАннотаций = пРазворачивательАннотаций;
	ПрилепляторЧастиц = пПрилепляторЧастиц;

	НапильникМенеджер = Новый НапильникМенеджер(Поделка);
	НапильникМенеджер.УстановитьФабрикуЖелудей(ЭтотОбъект);
	ПриемкаЗависимостей = Новый ПриемкаЗависимостей(Поделка, РазворачивательАннотаций, ПрилепляторЧастиц);

	ОпределенияЖелудейПоИмени = Новый Соответствие();
	ОпределенияЖелудейПоПрозвищу = Новый Соответствие();

	Лог = Логирование.ПолучитьЛог("oscript.lib.autumn.core.ФабрикаЖелудей");

КонецПроцедуры

#КонецОбласти
