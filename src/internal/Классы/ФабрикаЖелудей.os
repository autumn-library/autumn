#Использовать annotations
#Использовать asserts
#Использовать fluent
#Использовать reflector

#Область ОписаниеПеременных

// Поделка - Управляющий ioc-контейнер.
Перем Поделка;
// РазворачивательАннотаций - разворачиватель аннотаций свойств и методов желудей.
Перем РазворачивательАннотаций;
// ПрилепляторЧастиц - объект, который умеет прилеплять частицы к желудям.
Перем ПрилепляторЧастиц;

// РепозиторийОпределенийЖелудей - хранилище определений желудей
Перем РепозиторийОпределенийЖелудей;

// МенеджерНапильников - управляющий работой с напильниками
Перем МенеджерНапильников;

// ЧитательАннотаций - читатель параметров из аннотаций
Перем ЧитательАннотаций;

// ФабрикаЗавязей - фабрика для создания завязей
Перем ФабрикаЗавязей;

// Рефлектор - кеш инстанса рефлектора
Перем Рефлектор;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОпределенияЖелудей() Экспорт
	Возврат РепозиторийОпределенийЖелудей.ПолучитьОпределенияЖелудей();
КонецФункции

Функция ПолучитьОпределениеЖелудя(Имя) Экспорт
	Возврат РепозиторийОпределенийЖелудей.ПолучитьОпределениеЖелудя(Имя);
КонецФункции

Функция ПолучитьСписокОпределенийЖелудей(Имя) Экспорт
	Возврат РепозиторийОпределенийЖелудей.ПолучитьСписокОпределенийЖелудей(Имя);
КонецФункции

Процедура ПроинициализироватьНапильники() Экспорт
	МенеджерНапильников.ПроинициализироватьНапильники();
КонецПроцедуры

Функция ДобавитьДуб(ТипДуба) Экспорт

	ОпределениеЖелудя = ДобавитьЖителяЛеса(ТипДуба, "", "Дуб");
	
	Возврат ОпределениеЖелудя;

КонецФункции

Функция ДобавитьЗавязьИзЛямбды(ЛямбдаЗавязи, Контекст = Неопределено) Экспорт
	
	ИмяКорневойАннотации = "Завязь";

	Выражение = Лямбда.Выражение(ЛямбдаЗавязи);

	Если ТипЗнч(Контекст) = Тип("Структура") Тогда
		Выражение.Контекст(Контекст);
	Иначе
		Выражение.ЗахватитьОбъект(Контекст);
	КонецЕсли;

	Объект = Выражение.ВОбъект();

	Методы = Рефлектор.ПолучитьТаблицуМетодов(Объект);

	РазворачивательАннотаций.РазвернутьАннотацииСвойств(Методы, Объект);

	Завязи = РаботаСАннотациями.НайтиМетодыСАннотацией(Методы, ИмяКорневойАннотации);

	Если Завязи.Количество() <> 1 Тогда
		
		ВызватьИсключение СтрШаблон(
			"Лямбда выражения не содержит завязи:
            | %1",
			ЛямбдаЗавязи
		);

	КонецЕсли;

	Завязь = Завязи[0];

	ИмяЖелудя = ЧитательАннотаций.ПрочитатьИмяЖелудя(Завязь.Аннотации, ИмяКорневойАннотации, "");
	ТипЖелудя = ЧитательАннотаций.ПрочитатьТипЖелудя(Завязь, Завязь.Аннотации);

	ОпределениеЗавязи = СоздатьОпределениеЖелудя(
		ИмяЖелудя,
		ТипЖелудя,
		Объект,
		Завязь,
		Завязь.Аннотации,
		ИмяКорневойАннотации
	);

	РепозиторийОпределенийЖелудей.СохранитьОпределениеЖелудя(ОпределениеЗавязи);

	Возврат ОпределениеЗавязи;

КонецФункции

Функция ДобавитьНапильник(ТипНапильника) Экспорт
	ОпределениеНапильника = ДобавитьЖителяЛеса(ТипНапильника, "", "Напильник");

	МенеджерНапильников.ДобавитьНапильник(ОпределениеНапильника);

	Возврат ОпределениеНапильника;
КонецФункции

Функция НайтиЖелудь(ИмяЖелудя, ПрилепляемыеЧастицы) Экспорт

	ОпределениеЖелудя = Поделка.ПолучитьОпределениеЖелудя(ИмяЖелудя);

	Если ОпределениеЖелудя = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить определение Желудя по имени Желудя %1", ИмяЖелудя);
	КонецЕсли;

	ЭтоНапильник = МенеджерНапильников.ЭтоНапильник(ОпределениеЖелудя);

	Если ЭтоНапильник Тогда
		МенеджерНапильников.НачатьИнициализациюНапильника(ОпределениеЖелудя.Имя());
	КонецЕсли;

	ПереданныеПрилепляемыеЧастицы = ПрилепляемыеЧастицы;
	Если ПереданныеПрилепляемыеЧастицы = Неопределено Тогда
		ПереданныеПрилепляемыеЧастицы = Новый Массив;
	КонецЕсли;

	Если ПереданныеПрилепляемыеЧастицы.Количество() = ОпределениеЖелудя.ПрилепляемыеЧастицы().Количество() Тогда
		ПередаваемыеПрилепляемыеЧастицы = ПереданныеПрилепляемыеЧастицы;
	Иначе
		
		КоличествоБлестяшек = ПосчитатьКоличествоБлестяшек(ОпределениеЖелудя.ПрилепляемыеЧастицы());

		Если КоличествоБлестяшек <> ПереданныеПрилепляемыеЧастицы.Количество() Тогда
			ВызватьИсключение СтрШаблон(
				"При поиске желудя %1 количество переданных произвольных параметров отличается от количества параметров не-желудей/не-деталек.",
				ИмяЖелудя
			);
		КонецЕсли;

		СчетчикИспользованияБлестяшек = 0;
		ПередаваемыеПрилепляемыеЧастицы = Новый Массив;
		Для Каждого ДанныеОПрилепляемойЧастице Из ОпределениеЖелудя.ПрилепляемыеЧастицы() Цикл
			
			Если ДанныеОПрилепляемойЧастице.ТипЧастицы() = ТипыПрилепляемыхЧастиц.Блестяшка() Тогда
				ПрилепляемаяЧастица = ПереданныеПрилепляемыеЧастицы[СчетчикИспользованияБлестяшек];
				СчетчикИспользованияБлестяшек = СчетчикИспользованияБлестяшек + 1;
			Иначе
				ПрилепляемаяЧастица = ПрилепляторЧастиц.НайтиПрилепляемуюЧастицу(ДанныеОПрилепляемойЧастице);
			КонецЕсли;

			ПередаваемыеПрилепляемыеЧастицы.Добавить(ПрилепляемаяЧастица);
		КонецЦикла;
	КонецЕсли;

	Завязь = ОпределениеЖелудя.Завязь();
	
	Действие = Завязь.Действие();
	Если Завязь.ЭтоКонструктор() Тогда
		Желудь = Действие.Выполнить(ОпределениеЖелудя.ТипЖелудя(), ПередаваемыеПрилепляемыеЧастицы);
	ИначеЕсли Не ЗначениеЗаполнено(Завязь.Родитель()) Тогда
		Желудь = Рефлектор.ВызватьМетод(Действие, "Выполнить", ПередаваемыеПрилепляемыеЧастицы);		
	Иначе
		Желудь = Действие.Выполнить(Поделка, Завязь.Родитель(), Завязь.ИмяМетода(), ПередаваемыеПрилепляемыеЧастицы);
	КонецЕсли;

	Если ЭтоНапильник Тогда
		МенеджерНапильников.ЗавершитьИнициализациюНапильника(ОпределениеЖелудя.Имя());
	Иначе
		Если НЕ ОпределениеЖелудя.Спецификация() = СостоянияПриложения.Инициализация() Тогда
			Желудь = МенеджерНапильников.ПрименитьНапильники(Желудь, ОпределениеЖелудя);
		КонецЕсли;
	КонецЕсли;

	Возврат Желудь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПосчитатьКоличествоБлестяшек(ПрилепляемыеЧастицы)
	Количество = 0;
	Для Каждого Элемент Из ПрилепляемыеЧастицы Цикл
		Если Элемент.ТипЧастицы() = ТипыПрилепляемыхЧастиц.Блестяшка() Тогда
			Количество = Количество + 1;	
		КонецЕсли;
	КонецЦикла;
	Возврат Количество;
КонецФункции

Функция ДобавитьЖителяЛеса(ТипЖителяЛеса, ИмяЖителяЛеса, АннотацияНадКонструктором) Экспорт

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипЖителяЛеса);
	АннотацияНадКонструкторомКаноническая = НРег(АннотацияНадКонструктором);
	УсловияПоиска = Новый Структура("Имя", АннотацияНадКонструкторомКаноническая);

	Методы = РефлекторОбъекта.ПолучитьТаблицуМетодов(Неопределено, Ложь);
	Конструктор = Неопределено;
	Аннотации = Неопределено;
	
	Для Каждого Метод Из Методы Цикл
		РазворачивательАннотаций.РазвернутьАннотацииСвойства(Метод, ТипЖителяЛеса);
		Аннотации = Метод.Аннотации;

		НайденныеСтроки = Аннотации.НайтиСтроки(УсловияПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НайденныеСтроки.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон(
				"Над методом ""%1"" жителя леса с типом ""%2"" найдено более одной аннотации ""%3"".",
				Метод.Имя,
				ТипЖителяЛеса,
				АннотацияНадКонструктором
			);
		КонецЕсли;
		
		Конструктор = Метод;
		Прервать;
	КонецЦикла;

	Если Конструктор = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Не найден метод жителя леса типа ""%1"" с аннотацией ""%2"".",
			ТипЖителяЛеса,
			АннотацияНадКонструктором
		);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяЖителяЛеса) Тогда
		ИмяЖителяЛеса = ЧитательАннотаций.ПрочитатьИмяЖелудя(Аннотации, АннотацияНадКонструктором, Строка(ТипЖителяЛеса));
	КонецЕсли;

	ОпределениеЖелудя = СоздатьОпределениеЖелудя(
		ИмяЖителяЛеса,
		ТипЖителяЛеса,
		ТипЖителяЛеса,
		Конструктор,
		Аннотации,
		АннотацияНадКонструктором
	);
	РепозиторийОпределенийЖелудей.СохранитьОпределениеЖелудя(ОпределениеЖелудя);

	ПараметрыСобытия = Новый Массив;
	ПараметрыСобытия.Добавить(ОпределениеЖелудя);
	ВызватьСобытие("ПриДобавленииОпределенияЖелудя", ПараметрыСобытия);

	Возврат ОпределениеЖелудя;

КонецФункции

Функция СоздатьОпределениеЖелудя(
	ИмяЖелудя,
	ТипЖелудя,
	ВладелецСвойств,
	Конструктор,
	Аннотации,
	ИмяКорневойАннотации
)

	Завязь = ФабрикаЗавязей.СоздатьЗавязь(ВладелецСвойств, Конструктор);
	
	ПрилепляемыеЧастицы = ПрочитатьПрилепляемыеЧастицыВМетоде(Конструктор, ВладелецСвойств);
	Характер = ЧитательАннотаций.ПрочитатьХарактерЖелудя(Аннотации);
	Прозвища = ЧитательАннотаций.ПрочитатьПрозвища(Аннотации, ИмяЖелудя);
	Порядок = ЧитательАннотаций.ПрочитатьПорядок(Аннотации);
	Верховный = ЧитательАннотаций.ПрочитатьПризнакВерховногоЖелудя(Аннотации);
	Спецификация = ЧитательАннотаций.ПрочитатьСпецификацию(Аннотации);
	КорневаяАннотация = ЧитательАннотаций.ПрочитатьКорневуюАннотацию(Аннотации, ИмяКорневойАннотации);

	// TODO: Унести в Приемку &Дуб
	// Если Спецификация = СостоянияПриложения.Инициализация() 
	// 	И НЕ ОпределениеЖелудя.Спецификация() = СостоянияПриложения.Инициализация() Тогда
	// 	ТекстСообщения = СтрШаблон(
	// 		"Дуб %1 имеет завязь %2, которая имеет &Спецификацию ""Инициализация"", но сам дуб не имеет этой спецификации.",
	// 		ОпределениеЖелудя.Имя(),
	// 		Конструктор.Имя
	// 	);
	// 	ВызватьИсключение ТекстСообщения;
	// КонецЕсли;

	ОпределениеЖелудя = Новый ОпределениеЖелудя(
		РазворачивательАннотаций,
		ТипЖелудя,
		ИмяЖелудя,
		Характер,
		ПрилепляемыеЧастицы,
		Завязь,
		Прозвища,
		Порядок,
		Верховный,
		Спецификация,
		КорневаяАннотация
	);

	Возврат ОпределениеЖелудя;

КонецФункции

Функция ПрочитатьПрилепляемыеЧастицыВМетоде(Метод, ВладелецСвойств)

	ПрилепляемыеЧастицы = Новый Массив;
	Для Каждого ПараметрМетода Из Метод.Параметры Цикл

		РазворачивательАннотаций.РазвернутьАннотацииСвойства(ПараметрМетода, ВладелецСвойств);

		ПрилепляемаяЧастица = ПрилепляторЧастиц.ДанныеОПрилепляемойЧастице(ПараметрМетода);
		ПрилепляемыеЧастицы.Добавить(ПрилепляемаяЧастица);

	КонецЦикла;

	Возврат ПрилепляемыеЧастицы;

КонецФункции

#КонецОбласти

#Область Инициализация

Процедура ПриСозданииОбъекта(пПоделка, пРазворачивательАннотаций, пПрилепляторЧастиц)

	Рефлектор = Новый Рефлектор();

	Поделка = пПоделка;
	РазворачивательАннотаций = пРазворачивательАннотаций;
	ПрилепляторЧастиц = пПрилепляторЧастиц;

	РепозиторийОпределенийЖелудей = Новый РепозиторийОпределенийЖелудей();
	МенеджерНапильников = Новый МенеджерНапильников(Поделка, РепозиторийОпределенийЖелудей);
	ЧитательАннотаций = Новый ЧитательАннотаций(Поделка);
	ФабрикаЗавязей = Новый ФабрикаЗавязей();

КонецПроцедуры

#КонецОбласти
