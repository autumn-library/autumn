#Область ОписаниеПеременных

// Соответствие - Значения деталек в виде соответствия
// для последующей передачи в МенеджерПараметров.
//
Перем ЗначенияДеталек;

// Строка - префикс переменных среды, хранящих значения деталек.
//
Перем ПрефиксПеременныхСреды;

// Строка - имя файла (без расширения), в котором хранятся значения деталек.
//
Перем ИмяФайлаСоЗначениямиДеталек;

// Строка - Относительный путь к каталогу, где хранятся файл со значениями деталек.
//
Перем ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Установить/получить значения деталек (параметров конфигурации).
//
// Параметры:
//   НовоеЗначение - Соответствие - устанавливаемые значения деталек.
//
//  Возвращаемое значение:
//   Соответствие, СоветДругогоМастера - Текущее установленное значение для гетера, ЭтотОбъект для сеттера.
//
// Параметры:
//   НовоеЗначение - Соответствие - устанавливаемые значения деталек.
//
//  Возвращаемое значение:
//   Соответствие, СоветДругогоМастера - Текущее установленное значение для гетера, ЭтотОбъект для сеттера.
//
Функция ЗначенияДеталек(НовоеЗначение = Неопределено) Экспорт

	Если НовоеЗначение <> Неопределено Тогда
		ЗначенияДеталек = НовоеЗначение;
		Возврат ЭтотОбъект;
	КонецЕсли;

	Возврат ЗначенияДеталек;

КонецФункции

// Установить/получить префикс для поиска переменных среды с параметрами.
// Система будет искать переменные среды, начинающиеся с указанного префикса.
//
// Параметры:
//   НовоеЗначение - Строка - устанавливаемый префикс переменных среды.
//
//  Возвращаемое значение:
//   Строка, СоветДругогоМастера - Текущее установленное значение для гетера, ЭтотОбъект для сеттера.
//
Функция ПрефиксПеременныхСреды(НовоеЗначение = Неопределено) Экспорт
	
	Если НовоеЗначение <> Неопределено Тогда
		ПрефиксПеременныхСреды = НовоеЗначение;
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	Возврат ПрефиксПеременныхСреды;

КонецФункции

// Установить/получить имя файла (без расширения), в котором хранятся значения деталек.
//
// Параметры:
//   НовоеЗначение - Строка - устанавливаемое имя файла.
//
//  Возвращаемое значение:
//   Строка, СоветДругогоМастера - Текущее установленное значение для гетера, ЭтотОбъект для сеттера.
//
Функция ИмяФайлаСоЗначениямиДеталек(НовоеЗначение = Неопределено) Экспорт

	Если НовоеЗначение <> Неопределено Тогда
		ИмяФайлаСоЗначениямиДеталек = НовоеЗначение;
		Возврат ЭтотОбъект;
	КонецЕсли;

	Возврат ИмяФайлаСоЗначениямиДеталек;

КонецФункции

// Установить/получить относительный путь к каталогу, где хранятся файл со значениями деталек.
//
// Параметры:
//   НовоеЗначение - Строка - устанавливаемый путь к каталогу.
//
//  Возвращаемое значение:
//   Строка, СоветДругогоМастера - Текущее установленное значение для гетера, ЭтотОбъект для сеттера.
//
Функция ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек(НовоеЗначение = Неопределено) Экспорт

	Если НовоеЗначение <> Неопределено Тогда
		ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек = НовоеЗначение;
		Возврат ЭтотОбъект;
	КонецЕсли;

	Возврат ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек;

КонецФункции

#КонецОбласти

#Область Инициализация

// Пример использования:
//
// ```bsl
// // Создание и настройка советника для конфигурации приложения
// Совет = Новый СоветДругогоМастера();
//
// // Установка значений деталек напрямую
// ЗначенияДеталек = Новый Соответствие();
// ЗначенияДеталек.Вставить("app.name", "МоеПриложение");
// ЗначенияДеталек.Вставить("app.version", "1.0.0");
// ЗначенияДеталек.Вставить("database.host", "localhost");
//
// Совет.ЗначенияДеталек(ЗначенияДеталек)
//      .ПрефиксПеременныхСреды("MYAPP_")
//      .ИмяФайлаСоЗначениямиДеталек("application")
//      .ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек("config");
//
// // Использование в создании поделки
// Поделка = Новый Поделка(Совет);
// ```
//
// Данная конфигурация приведет к следующему поведению системы параметров:
// 1. Переменные среды с префиксом `MYAPP_` будут загружены в параметры
// 2. Файлы `application.json`, `application.yaml`, `application.yml`, `application.ini` будут искаться в стандартных каталогах и каталоге `config`
// 3. Значения, установленные напрямую в соответствии, будут иметь наивысший приоритет

// Класс-конфигуратор для управления параметрами приложения в фреймворке ОСень. 
// Позволяет настроить различные источники конфигурации: переменные среды, 
// файлы JSON/YAML/INI, и прямые значения параметров.
//
// Создает объект с настройками по умолчанию для управления параметрами приложения.
// Инициализирует пустое соответствие значений деталек, устанавливает имя файла 
// конфигурации "autumn-properties" и каталог поиска "src".
//
Процедура ПриСозданииОбъекта()

	ЗначенияДеталек = Новый Соответствие();
	ПрефиксПеременныхСреды = "";
	ИмяФайлаСоЗначениямиДеталек = "autumn-properties";
	ДополнительныйКаталогПоискаФайлаСоЗначениямиДеталек = "src";

КонецПроцедуры

#КонецОбласти
