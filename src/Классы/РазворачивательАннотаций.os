// Поделка - Управляющий ioc-контейнер.
Перем _Поделка;
// Рефлектор - стандартный рефлектор OneScript.
Перем _Рефлектор;

// Развернуть все аннотации переданного свойства рекурсивно.
// Для разворачивания используются данные из определений аннотаций.
//
// Параметры:
//   Свойство - Структура - Описание свойства, метода или параметра метода:
//     * Аннотации - ТаблицаЗначений - Таблица аннотаций свойства:
//       ** Имя - Строка - Имя аннотации.
//        ** Параметры - ТаблицаЗначений - Таблица параметров аннотации:
//           *** Имя      - Строка - Имя параметра аннотации.
//           *** Значение - Строка - Значение параметра аннотации.
//   ТипВладельцаСвойства - Тип - Тип владельца свойства.
//
Процедура РазвернутьАннотацииСвойства(Свойство, ТипВладельцаСвойства) Экспорт
	
	ОпределенияАннотаций = _Поделка.ПолучитьОпределенияАннотаций();
	Аннотации = Свойство.Аннотации;
	НакопленныеАннотации = Свойство.Аннотации.СкопироватьКолонки();
	
	РазвернутьАннотации(ОпределенияАннотаций, Аннотации, НакопленныеАннотации, ТипВладельцаСвойства, Свойство);
	
	Свойство.Аннотации = НакопленныеАннотации;
	
КонецПроцедуры

// Развернуть все аннотации переданного свойства рекурсивно.
// Для разворачивания используются данные из определений аннотаций.
//
// Параметры:
//   Свойства - Массив Из Структура - Описания свойств, методов или параметров метода:
//     * Аннотации - ТаблицаЗначений - Таблица аннотаций свойства:
//       ** Имя - Строка - Имя аннотации.
//        ** Параметры - ТаблицаЗначений - Таблица параметров аннотации:
//           *** Имя      - Строка - Имя параметра аннотации.
//           *** Значение - Строка - Значение параметра аннотации.
//   ТипВладельцаСвойств - Тип - Тип владельца свойств.
//
Процедура РазвернутьАннотацииСвойств(Свойства, ТипВладельцаСвойств) Экспорт
	
	Для Каждого Свойство Из Свойства Цикл
		РазвернутьАннотацииСвойства(Свойство, ТипВладельцаСвойств);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьАннотации(
	ОпределенияАннотаций,
	Аннотации,
	НакопленныеАннотации,
	ТипВладельцаСвойств,
	Свойство,
	УровеньВложенности = 1
)
	
	Для Каждого Аннотация Из Аннотации Цикл
		
		ЭтоКорневаяАннотация = НРег(Аннотация.Имя) = НРег("Аннотация");
		
		Если НЕ ЭтоКорневаяАннотация Тогда
			НоваяАннотация = НакопленныеАннотации.Добавить();
			НоваяАннотация.Имя = Аннотация.Имя;
			
			НоваяАннотация.Параметры = Аннотация.Параметры.Скопировать();
		КонецЕсли;
		
		ОпределениеАннотации = ОпределенияАннотаций.Получить(НРег(Аннотация.Имя));
		
		Если ОпределениеАннотации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныеАннотации = ОпределениеАннотации.Аннотации();
		
		// Проверяем только аннотации на самом верхнем уровне вложенности,
		// т.к. остальные проверяются при регистрации аннотации.
		Если УровеньВложенности = 1 Тогда
			ОпределениеАннотации.Проверить(Аннотация, ТипВладельцаСвойств);
		КонецЕсли;

		ОбъектАннотации = ОпределениеАннотации.СоздатьОбъектАннотации(Аннотация);
			
		Если _Рефлектор.МетодСуществует(ОбъектАннотации, "ПриРазворачиванииАннотации") Тогда
			ОбъектАннотации.ПриРазворачиванииАннотации(
				ОпределениеАннотации,
				ПодчиненныеАннотации,
				ТипВладельцаСвойств,
				Свойство
			);
		КонецЕсли;
		
		Если НЕ ЭтоКорневаяАннотация Тогда
			РазвернутьАннотации(
				ОпределенияАннотаций,
				ПодчиненныеАннотации,
				НакопленныеАннотации,
				ТипВладельцаСвойств,
				Свойство,
				УровеньВложенности + 1
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&Желудь
Процедура ПриСозданииОбъекта(&Пластилин Поделка)
	_Поделка = Поделка;
	_Рефлектор = Новый Рефлектор();
КонецПроцедуры